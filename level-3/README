Queue To Do
============

===============================================================================
===============================================================================

# To trick the system, you'll need to write a program to;

	->  Return, the same security checksum that the bunny trainers would have after they would have checked all the workers through. 

# Fortunately, Commander Lambda's desire for efficiency won't allow for hours-long lines, 
	
	-> So the trainers at the checkpoint have found ways to quicken the pass-through rate. 


## Instead of checking each and every worker coming through, 

	-> Not a linear count!!!

-> The bunny trainers instead go over everyone in line while noting their worker IDs, 

	-> Then allow the line to fill back up.

-> Once they've done that they go over the line again, 

	-> This time leaving off the last worker. 

## They continue doing this, leaving off one more worker from the line each time but recording the worker IDs of those they do check, 

	-> Until they skip the entire line, at which point they XOR the IDs of all the workers they noted into a checksum and then take off for lunch. 


* Fortunately, the workers' orderly nature causes them to always line up in numerical order without any gaps.

	-> Input already numerically sorted

===============================================================================
===============================================================================

# For example, if the first worker in line has ID 0 and the security checkpoint line holds three workers,

## The process would look like this:

		0 1 2 /
		3 4 / 5
		6 / 7 8

### Where the trainers' XOR (^) checksum is 

	>>> solution(0, 3)

	 >>> returns [ 0^1^2^3^4^6 => ( 2 ) ]


===============================================================================

#Likewise, if the first worker has ID 17 and the checkpoint holds four workers,

## The process would look like:

		17 18 19 20 /
		21 22 23 / 24
		25 26 / 27 28
		29 / 30 31 32

-> Which produces the checksum;

	>>> solution(17, 4)

	 >>> return [ 17^18^19^20^21^22^23^25^26^29 == ( 14 ) ]

===============================================================================

# TestCase: Me
# InputMatrix: [ solution(s=3, r=4) ]

	[
		[03, 04, 05, 06, //], 
		[07, 08, 09, //, 10],
		[11, 12, //, 13, 14],
		[15, //, 16, 17, 18],
	]

## Solving:

-> Use list compreshensions to generate matrices:

	mx = list()

	for row in range(r):

===============================================================================
===============================================================================

# All worker IDs (including the first worker) are between 0 and 2000000000 inclusive, 

	-> And the checkpoint line will always be at least 1 worker long.


# With this information, write a function; [ solution(start, length) ] 

	-> That will cover for the missing security checkpoint.

	-> By outputting the same checksum the trainers would normally submit before lunch. 


# You have just enough time to find out; 

	-> The ID of the first worker to be checked (start)

		-> [ Seed Bit ]

	-> And the length of the line (length) before the automatic review occurs, 


* So your program must generate the proper checksum with just those two values.

===============================================================================
===============================================================================

Test cases
==========

Input:
	solution.solution(0, 3)

Output:
    2

Input:
	solution.solution(17, 4)

Output:
    14

===============================================================================
===============================================================================

		


























